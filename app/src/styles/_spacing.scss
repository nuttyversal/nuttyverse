// Spacing and sizing design tokens adapted from Tailwind CSS. We use
// rem units instead of px to support dynamic root font sizes, allowing
// for flexible scaling across different viewport sizes.

@use "sass:map";

$spacing: (
  "0": 0px,
  "px": 1px,
  "0.5": 0.125rem,
  "1": 0.25rem,
  "1.5": 0.375rem,
  "2": 0.5rem,
  "2.5": 0.625rem,
  "3": 0.75rem,
  "3.5": 0.875rem,
  "4": 1rem,
  "5": 1.25rem,
  "6": 1.5rem,
  "7": 1.75rem,
  "8": 2rem,
  "9": 2.25rem,
  "10": 2.5rem,
  "11": 2.75rem,
  "12": 3rem,
  "14": 3.5rem,
  "16": 4rem,
  "20": 5rem,
  "24": 6rem,
  "28": 7rem,
  "32": 8rem,
  "36": 9rem,
  "40": 10rem,
  "44": 11rem,
  "48": 12rem,
  "52": 13rem,
  "56": 14rem,
  "60": 15rem,
  "64": 16rem,
  "72": 18rem,
  "80": 20rem,
  "96": 24rem,
  "144": 36rem,
  "192": 48rem,
  "256": 64rem
);

$relative-spacing: (
  "0": 0px,
  "px": 1px,
  "0.5": 0.125em,
  "1": 0.25em,
  "1.5": 0.375em,
  "2": 0.5em,
  "2.5": 0.625em,
  "3": 0.75em,
  "3.5": 0.875em,
  "4": 1em,
  "5": 1.25em,
  "6": 1.5em,
  "7": 1.75em,
  "8": 2em,
  "9": 2.25em,
  "10": 2.5em,
  "11": 2.75em,
  "12": 3em,
  "14": 3.5em,
  "16": 4em,
  "20": 5em,
  "24": 6em,
  "28": 7em,
  "32": 8em,
  "36": 9em,
  "40": 10em,
  "44": 11em,
  "48": 12em,
  "52": 13em,
  "56": 14em,
  "60": 15em,
  "64": 16em,
  "72": 18em,
  "80": 20em,
  "96": 24em,
  "144": 36em,
  "192": 48em,
  "256": 64em
);

h1, h2, h3, h4, h5, h6 {
	margin-top: map.get($relative-spacing, "4");
	margin-bottom: map.get($relative-spacing, "2");
	padding-bottom: map.get($spacing, "0.5");

	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}
}

p, img {
	margin-top: map.get($relative-spacing, "4");
	margin-bottom: map.get($relative-spacing, "4");

	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}
}

pre {
	margin-top: map.get($relative-spacing, "6");
	margin-bottom: map.get($relative-spacing, "6");

	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}
}

.marginless {
	margin: 0;
}

// Allows child elements to span full width while maintaining consistent
// horizontal padding for text content. Headings and paragraphs receive
// padding, allowing other elements (e.g., images) to bleed to edges.

.with-full-bleed {
	width: 100%;

	& > p {
		padding-left: map.get($spacing, "4");
		padding-right: map.get($spacing, "4");
	}

	& > h1, & > h2, & > h3, & > h4, & > h5, & > h6 {
		padding-left: map.get($spacing, "4");
		padding-right: map.get($spacing, "4");
	}
}
